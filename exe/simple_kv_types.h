/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef simple_kv_TYPES_H
#define simple_kv_TYPES_H

# include <dsn/internal/serialization.h>

DEFINE_THREAD_POOL_CODE(THREAD_POOL_SIMPLE_KV)



namespace dsn { namespace replication { namespace application {

class kv_pair;


class kv_pair {
 public:

  kv_pair(const kv_pair&);
  kv_pair& operator=(const kv_pair&);
  kv_pair() : key(), value() {
  }

  virtual ~kv_pair() throw();
  std::string key;
  std::string value;
  bool operator == (const kv_pair & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const kv_pair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_pair & ) const;


};

void swap(kv_pair &a, kv_pair &b);

inline void unmarshall(::dsn::binary_reader& reader, __out_param kv_pair& val) {
  ::dsn::unmarshall(reader, val.key);
  ::dsn::unmarshall(reader, val.value);
}

inline void marshall(::dsn::binary_writer& writer, const kv_pair& val, uint16_t pos = 0xffff) {
  ::dsn::marshall(writer, val.key, pos);
  ::dsn::marshall(writer, val.value, pos);
}

}}} // namespace

#endif
