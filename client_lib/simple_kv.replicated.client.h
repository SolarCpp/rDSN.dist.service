/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef simple_kv_rDSN_H
#define simple_kv_rDSN_H

#include "simple_kv_types.h"
#include <dsn/serverlet.h>
#include <iostream>
#include "replication_app_client_base.h"

namespace dsn { namespace replication { namespace application {


// define task code for svc 'simple_kv'
DEFINE_NAMED_TASK_CODE_RPC(RPC_SIMPLE_KV_READ, read, ::dsn::TASK_PRIORITY_COMMON, THREAD_POOL_SIMPLE_KV)
DEFINE_NAMED_TASK_CODE_RPC(RPC_SIMPLE_KV_WRITE, write, ::dsn::TASK_PRIORITY_COMMON, THREAD_POOL_SIMPLE_KV)
DEFINE_NAMED_TASK_CODE_RPC(RPC_SIMPLE_KV_APPEND, append, ::dsn::TASK_PRIORITY_COMMON, THREAD_POOL_SIMPLE_KV)
DEFINE_TASK_CODE(LPC_SIMPLE_KV_CIENT_TEST_TIMER, ::dsn::TASK_PRIORITY_COMMON, THREAD_POOL_SIMPLE_KV)

// sync client
class simple_kv_client 
    : public replication_app_client_base
{
public:
    simple_kv_client(
        const std::vector<end_point>& meta_servers,
        const char* app_name
        )
        : replication_app_client_base(meta_servers, app_name)
    {
    }

    virtual int get_partition_index(const std::string& key) = 0;

    virtual int get_partition_index(const kv_pair& pr) = 0;

	::dsn::error_code read(
		const std::string& key, 
		__out_param std::string& resp, 
		int timeout_milliseconds = 0
		)
	{
        auto resp_task = replication_app_client_base::read<std::string, std::string>(
            get_partition_index(key),
            RPC_SIMPLE_KV_READ,
            key,
            nullptr,
            nullptr,
            timeout_milliseconds
            );
        
		resp_task->wait();
		if (resp_task->error() == ::dsn::ERR_SUCCESS)
		{
			::dsn::unmarshall(resp_task->get_response()->reader(), resp);
		}
		return resp_task->error();
	}

	::dsn::error_code write(
        const kv_pair& pr,
		__out_param int32_t& resp, 
		int timeout_milliseconds = 0, 
		int hash = 0)
	{
        auto resp_task = replication_app_client_base::write<kv_pair, int32_t>(
            get_partition_index(pr),
            RPC_SIMPLE_KV_WRITE,
            pr,
            nullptr,
            nullptr,
            timeout_milliseconds
            );

		resp_task->wait();
		if (resp_task->error() == ::dsn::ERR_SUCCESS)
		{
			::dsn::unmarshall(resp_task->get_response()->reader(), resp);
		}
		return resp_task->error();
	}

	::dsn::error_code append(
        const kv_pair& pr,
		__out_param int32_t& resp, 
		int timeout_milliseconds = 0, 
		int hash = 0)
	{
        auto resp_task = replication_app_client_base::write<kv_pair, int32_t>(
            get_partition_index(pr),
            RPC_SIMPLE_KV_APPEND,
            pr,
            nullptr,
            nullptr,
            timeout_milliseconds
            );

		resp_task->wait();
		if (resp_task->error() == ::dsn::ERR_SUCCESS)
		{
			::dsn::unmarshall(resp_task->get_response()->reader(), resp);
		}
		return resp_task->error();
	}
    
	::dsn::rpc_response_task_ptr begin_read(
		std::shared_ptr<std::string>& key, 
		
		int timeout_milliseconds = 0, 
		int reply_hash = 0)
	{
        return replication_app_client_base::read<simple_kv_client, std::string, std::string>(
            get_partition_index(*key),
            RPC_SIMPLE_KV_READ,
            key,
            this,
            &simple_kv_client::end_read,
            timeout_milliseconds
            );
	}

	virtual void end_read(
		::dsn::error_code err, 
		std::shared_ptr<std::string>& req, 
		std::shared_ptr<std::string>& resp)
	{
		if (err != ::dsn::ERR_SUCCESS) std::cout << "reply err : " << err.to_string() << std::endl;
		else
		{
			std::cout << "reply ok" << std::endl;
		}
	}

	::dsn::rpc_response_task_ptr begin_read2(
		const std::string& key, 		
		int timeout_milliseconds = 0, 
		int reply_hash = 0)
	{
        return replication_app_client_base::read<simple_kv_client, std::string, std::string>(
            get_partition_index(key),
            RPC_SIMPLE_KV_READ,
            key,
            this,
            &simple_kv_client::end_read2,
            timeout_milliseconds
            );
	}

	virtual void end_read2(
		::dsn::error_code err, 
		const std::string& resp)
	{
		if (err != ::dsn::ERR_SUCCESS) std::cout << "reply err : " << err.to_string() << std::endl;
		else
		{
			std::cout << "reply ok" << std::endl;
		}
	}

	::dsn::rpc_response_task_ptr begin_write( 
		std::shared_ptr<kv_pair>& pr, 
		int timeout_milliseconds = 0, 
		int reply_hash = 0)
	{
        return replication_app_client_base::write<simple_kv_client, kv_pair, int32_t>(
            get_partition_index(*pr),
            RPC_SIMPLE_KV_WRITE,
            pr,
            this,
            &simple_kv_client::end_write,
            timeout_milliseconds,
            reply_hash
            );
	}

	virtual void end_write(
		::dsn::error_code err, 
		std::shared_ptr<kv_pair>& req, 
		std::shared_ptr<int32_t>& resp)
	{
		if (err != ::dsn::ERR_SUCCESS) std::cout << "reply err : " << err.to_string() << std::endl;
		else
		{
			std::cout << "reply ok" << std::endl;
		}
	}

	::dsn::rpc_response_task_ptr begin_write2(
		const kv_pair& pr, 		
		int timeout_milliseconds = 0, 
		int reply_hash = 0)
	{
        return replication_app_client_base::write<simple_kv_client, kv_pair, int32_t>(
            get_partition_index(pr),
            RPC_SIMPLE_KV_WRITE,
            pr,
            this,
            &simple_kv_client::end_write2,
            timeout_milliseconds,
            reply_hash
            );
	}

	virtual void end_write2(
		::dsn::error_code err, 
		const int32_t& resp)
	{
		if (err != ::dsn::ERR_SUCCESS) std::cout << "reply err : " << err.to_string() << std::endl;
		else
		{
			std::cout << "reply ok" << std::endl;
		}
	}

	::dsn::rpc_response_task_ptr begin_append(
		std::shared_ptr<kv_pair>& pr, 
		
		int timeout_milliseconds = 0, 
		int reply_hash = 0)
	{
        return replication_app_client_base::write<simple_kv_client, kv_pair, int32_t>(
            get_partition_index(*pr),
            RPC_SIMPLE_KV_APPEND,
            pr,
            this,
            &simple_kv_client::end_append,
            timeout_milliseconds
            );
	}

	virtual void end_append(
		::dsn::error_code err, 
		std::shared_ptr<kv_pair>& req, 
		std::shared_ptr<int32_t>& resp)
	{
		if (err != ::dsn::ERR_SUCCESS) std::cout << "reply err : " << err.to_string() << std::endl;
		else
		{
			std::cout << "reply ok" << std::endl;
		}
	}

	::dsn::rpc_response_task_ptr begin_append2(
		const kv_pair& pr, 
		int timeout_milliseconds = 0, 
		int reply_hash = 0)
	{
        return replication_app_client_base::write<simple_kv_client, kv_pair, int32_t>(
            get_partition_index(pr),
            RPC_SIMPLE_KV_APPEND,
            pr,
            this,
            &simple_kv_client::end_append2,
            timeout_milliseconds
            );
	}

	virtual void end_append2(
		::dsn::error_code err, 
		const int32_t& resp)
	{
		if (err != ::dsn::ERR_SUCCESS) std::cout << "reply err : " << err.to_string() << std::endl;
		else
		{
			std::cout << "reply ok" << std::endl;
		}
	}

};


}}} // namespace


#endif
