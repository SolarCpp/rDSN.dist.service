/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "replication_types.h"

namespace dsn { namespace replication {


global_partition_id::~global_partition_id() throw() {
}


void swap(global_partition_id &a, global_partition_id &b) {
  using ::std::swap;
  swap(a.app_id, b.app_id);
  swap(a.pidx, b.pidx);
}

global_partition_id::global_partition_id(const global_partition_id& other0) {
  app_id = other0.app_id;
  pidx = other0.pidx;
}
global_partition_id& global_partition_id::operator=(const global_partition_id& other1) {
  app_id = other1.app_id;
  pidx = other1.pidx;
  return *this;
}

mutation_header::~mutation_header() throw() {
}


void swap(mutation_header &a, mutation_header &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.ballot, b.ballot);
  swap(a.decree, b.decree);
  swap(a.log_offset, b.log_offset);
  swap(a.last_committed_decree, b.last_committed_decree);
}

mutation_header::mutation_header(const mutation_header& other2) {
  gpid = other2.gpid;
  ballot = other2.ballot;
  decree = other2.decree;
  log_offset = other2.log_offset;
  last_committed_decree = other2.last_committed_decree;
}
mutation_header& mutation_header::operator=(const mutation_header& other3) {
  gpid = other3.gpid;
  ballot = other3.ballot;
  decree = other3.decree;
  log_offset = other3.log_offset;
  last_committed_decree = other3.last_committed_decree;
  return *this;
}

mutation_data::~mutation_data() throw() {
}


void swap(mutation_data &a, mutation_data &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.updates, b.updates);
}

mutation_data::mutation_data(const mutation_data& other4) {
  header = other4.header;
  updates = other4.updates;
}
mutation_data& mutation_data::operator=(const mutation_data& other5) {
  header = other5.header;
  updates = other5.updates;
  return *this;
}

partition_configuration::~partition_configuration() throw() {
}


void swap(partition_configuration &a, partition_configuration &b) {
  using ::std::swap;
  swap(a.app_type, b.app_type);
  swap(a.gpid, b.gpid);
  swap(a.ballot, b.ballot);
  swap(a.max_replica_count, b.max_replica_count);
  swap(a.primary, b.primary);
  swap(a.secondaries, b.secondaries);
  swap(a.drop_outs, b.drop_outs);
  swap(a.last_committed_decree, b.last_committed_decree);
}

partition_configuration::partition_configuration(const partition_configuration& other6) {
  app_type = other6.app_type;
  gpid = other6.gpid;
  ballot = other6.ballot;
  max_replica_count = other6.max_replica_count;
  primary = other6.primary;
  secondaries = other6.secondaries;
  drop_outs = other6.drop_outs;
  last_committed_decree = other6.last_committed_decree;
}
partition_configuration& partition_configuration::operator=(const partition_configuration& other7) {
  app_type = other7.app_type;
  gpid = other7.gpid;
  ballot = other7.ballot;
  max_replica_count = other7.max_replica_count;
  primary = other7.primary;
  secondaries = other7.secondaries;
  drop_outs = other7.drop_outs;
  last_committed_decree = other7.last_committed_decree;
  return *this;
}

replica_configuration::~replica_configuration() throw() {
}


void swap(replica_configuration &a, replica_configuration &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.ballot, b.ballot);
  swap(a.primary, b.primary);
  swap(a.status, b.status);
}

replica_configuration::replica_configuration(const replica_configuration& other8) {
  gpid = other8.gpid;
  ballot = other8.ballot;
  primary = other8.primary;
  status = other8.status;
}
replica_configuration& replica_configuration::operator=(const replica_configuration& other9) {
  gpid = other9.gpid;
  ballot = other9.ballot;
  primary = other9.primary;
  status = other9.status;
  return *this;
}

prepare_msg::~prepare_msg() throw() {
}


void swap(prepare_msg &a, prepare_msg &b) {
  using ::std::swap;
  swap(a.config, b.config);
  swap(a.mu, b.mu);
}

prepare_msg::prepare_msg(const prepare_msg& other10) {
  config = other10.config;
  mu = other10.mu;
}
prepare_msg& prepare_msg::operator=(const prepare_msg& other11) {
  config = other11.config;
  mu = other11.mu;
  return *this;
}

client_read_request2::~client_read_request2() throw() {
}


void swap(client_read_request2 &a, client_read_request2 &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.semantic, b.semantic);
  swap(a.version_decree, b.version_decree);
}

client_read_request2::client_read_request2(const client_read_request2& other12) {
  gpid = other12.gpid;
  semantic = other12.semantic;
  version_decree = other12.version_decree;
}
client_read_request2& client_read_request2::operator=(const client_read_request2& other13) {
  gpid = other13.gpid;
  semantic = other13.semantic;
  version_decree = other13.version_decree;
  return *this;
}

client_read_request::~client_read_request() throw() {
}


void swap(client_read_request &a, client_read_request &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.semantic, b.semantic);
  swap(a.version_decree, b.version_decree);
  swap(a.application_request, b.application_request);
}

client_read_request::client_read_request(const client_read_request& other14) {
  gpid = other14.gpid;
  semantic = other14.semantic;
  version_decree = other14.version_decree;
  application_request = other14.application_request;
}
client_read_request& client_read_request::operator=(const client_read_request& other15) {
  gpid = other15.gpid;
  semantic = other15.semantic;
  version_decree = other15.version_decree;
  application_request = other15.application_request;
  return *this;
}

client_write_request::~client_write_request() throw() {
}


void swap(client_write_request &a, client_write_request &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.application_request, b.application_request);
}

client_write_request::client_write_request(const client_write_request& other16) {
  gpid = other16.gpid;
  application_request = other16.application_request;
}
client_write_request& client_write_request::operator=(const client_write_request& other17) {
  gpid = other17.gpid;
  application_request = other17.application_request;
  return *this;
}

client_response::~client_response() throw() {
}


void swap(client_response &a, client_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.application_response, b.application_response);
}

client_response::client_response(const client_response& other18) {
  err = other18.err;
  application_response = other18.application_response;
}
client_response& client_response::operator=(const client_response& other19) {
  err = other19.err;
  application_response = other19.application_response;
  return *this;
}

prepare_ack::~prepare_ack() throw() {
}


void swap(prepare_ack &a, prepare_ack &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.err, b.err);
  swap(a.ballot, b.ballot);
  swap(a.decree, b.decree);
  swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
  swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
}

prepare_ack::prepare_ack(const prepare_ack& other20) {
  gpid = other20.gpid;
  err = other20.err;
  ballot = other20.ballot;
  decree = other20.decree;
  last_committed_decree_in_app = other20.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other20.last_committed_decree_in_prepare_list;
}
prepare_ack& prepare_ack::operator=(const prepare_ack& other21) {
  gpid = other21.gpid;
  err = other21.err;
  ballot = other21.ballot;
  decree = other21.decree;
  last_committed_decree_in_app = other21.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other21.last_committed_decree_in_prepare_list;
  return *this;
}

learn_state::~learn_state() throw() {
}


void swap(learn_state &a, learn_state &b) {
  using ::std::swap;
  swap(a.meta, b.meta);
  swap(a.files, b.files);
}

learn_state::learn_state(const learn_state& other22) {
  meta = other22.meta;
  files = other22.files;
}
learn_state& learn_state::operator=(const learn_state& other23) {
  meta = other23.meta;
  files = other23.files;
  return *this;
}

learn_request::~learn_request() throw() {
}


void swap(learn_request &a, learn_request &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.learner, b.learner);
  swap(a.signature, b.signature);
  swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
  swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
  swap(a.app_specific_learn_request, b.app_specific_learn_request);
}

learn_request::learn_request(const learn_request& other24) {
  gpid = other24.gpid;
  learner = other24.learner;
  signature = other24.signature;
  last_committed_decree_in_app = other24.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other24.last_committed_decree_in_prepare_list;
  app_specific_learn_request = other24.app_specific_learn_request;
}
learn_request& learn_request::operator=(const learn_request& other25) {
  gpid = other25.gpid;
  learner = other25.learner;
  signature = other25.signature;
  last_committed_decree_in_app = other25.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other25.last_committed_decree_in_prepare_list;
  app_specific_learn_request = other25.app_specific_learn_request;
  return *this;
}

learn_response::~learn_response() throw() {
}


void swap(learn_response &a, learn_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.config, b.config);
  swap(a.commit_decree, b.commit_decree);
  swap(a.prepare_start_decree, b.prepare_start_decree);
  swap(a.state, b.state);
  swap(a.base_local_dir, b.base_local_dir);
}

learn_response::learn_response(const learn_response& other26) {
  err = other26.err;
  config = other26.config;
  commit_decree = other26.commit_decree;
  prepare_start_decree = other26.prepare_start_decree;
  state = other26.state;
  base_local_dir = other26.base_local_dir;
}
learn_response& learn_response::operator=(const learn_response& other27) {
  err = other27.err;
  config = other27.config;
  commit_decree = other27.commit_decree;
  prepare_start_decree = other27.prepare_start_decree;
  state = other27.state;
  base_local_dir = other27.base_local_dir;
  return *this;
}

group_check_request::~group_check_request() throw() {
}


void swap(group_check_request &a, group_check_request &b) {
  using ::std::swap;
  swap(a.app_type, b.app_type);
  swap(a.node, b.node);
  swap(a.config, b.config);
  swap(a.last_committed_decree, b.last_committed_decree);
  swap(a.learner_signature, b.learner_signature);
}

group_check_request::group_check_request(const group_check_request& other28) {
  app_type = other28.app_type;
  node = other28.node;
  config = other28.config;
  last_committed_decree = other28.last_committed_decree;
  learner_signature = other28.learner_signature;
}
group_check_request& group_check_request::operator=(const group_check_request& other29) {
  app_type = other29.app_type;
  node = other29.node;
  config = other29.config;
  last_committed_decree = other29.last_committed_decree;
  learner_signature = other29.learner_signature;
  return *this;
}

group_check_response::~group_check_response() throw() {
}


void swap(group_check_response &a, group_check_response &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.err, b.err);
  swap(a.last_committed_decree_in_app, b.last_committed_decree_in_app);
  swap(a.last_committed_decree_in_prepare_list, b.last_committed_decree_in_prepare_list);
  swap(a.learner_status_, b.learner_status_);
  swap(a.learner_signature, b.learner_signature);
  swap(a.node, b.node);
}

group_check_response::group_check_response(const group_check_response& other30) {
  gpid = other30.gpid;
  err = other30.err;
  last_committed_decree_in_app = other30.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other30.last_committed_decree_in_prepare_list;
  learner_status_ = other30.learner_status_;
  learner_signature = other30.learner_signature;
  node = other30.node;
}
group_check_response& group_check_response::operator=(const group_check_response& other31) {
  gpid = other31.gpid;
  err = other31.err;
  last_committed_decree_in_app = other31.last_committed_decree_in_app;
  last_committed_decree_in_prepare_list = other31.last_committed_decree_in_prepare_list;
  learner_status_ = other31.learner_status_;
  learner_signature = other31.learner_signature;
  node = other31.node;
  return *this;
}

simple_kv_request::~simple_kv_request() throw() {
}


void swap(simple_kv_request &a, simple_kv_request &b) {
  using ::std::swap;
  swap(a.op, b.op);
  swap(a.key, b.key);
  swap(a.value, b.value);
}

simple_kv_request::simple_kv_request(const simple_kv_request& other32) {
  op = other32.op;
  key = other32.key;
  value = other32.value;
}
simple_kv_request& simple_kv_request::operator=(const simple_kv_request& other33) {
  op = other33.op;
  key = other33.key;
  value = other33.value;
  return *this;
}

simple_kv_response::~simple_kv_response() throw() {
}


void swap(simple_kv_response &a, simple_kv_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.key, b.key);
  swap(a.value, b.value);
}

simple_kv_response::simple_kv_response(const simple_kv_response& other34) {
  err = other34.err;
  key = other34.key;
  value = other34.value;
}
simple_kv_response& simple_kv_response::operator=(const simple_kv_response& other35) {
  err = other35.err;
  key = other35.key;
  value = other35.value;
  return *this;
}

meta_request_header::~meta_request_header() throw() {
}


void swap(meta_request_header &a, meta_request_header &b) {
  using ::std::swap;
  swap(a.rpc_tag, b.rpc_tag);
}

meta_request_header::meta_request_header(const meta_request_header& other36) {
  rpc_tag = other36.rpc_tag;
}
meta_request_header& meta_request_header::operator=(const meta_request_header& other37) {
  rpc_tag = other37.rpc_tag;
  return *this;
}

meta_response_header::~meta_response_header() throw() {
}


void swap(meta_response_header &a, meta_response_header &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.primary_address, b.primary_address);
}

meta_response_header::meta_response_header(const meta_response_header& other38) {
  err = other38.err;
  primary_address = other38.primary_address;
}
meta_response_header& meta_response_header::operator=(const meta_response_header& other39) {
  err = other39.err;
  primary_address = other39.primary_address;
  return *this;
}

configuration_update_request::~configuration_update_request() throw() {
}


void swap(configuration_update_request &a, configuration_update_request &b) {
  using ::std::swap;
  swap(a.config, b.config);
  swap(a.type, b.type);
  swap(a.node, b.node);
}

configuration_update_request::configuration_update_request(const configuration_update_request& other40) {
  config = other40.config;
  type = other40.type;
  node = other40.node;
}
configuration_update_request& configuration_update_request::operator=(const configuration_update_request& other41) {
  config = other41.config;
  type = other41.type;
  node = other41.node;
  return *this;
}

configuration_update_response::~configuration_update_response() throw() {
}


void swap(configuration_update_response &a, configuration_update_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.config, b.config);
}

configuration_update_response::configuration_update_response(const configuration_update_response& other42) {
  err = other42.err;
  config = other42.config;
}
configuration_update_response& configuration_update_response::operator=(const configuration_update_response& other43) {
  err = other43.err;
  config = other43.config;
  return *this;
}

configuration_proposal_request::~configuration_proposal_request() throw() {
}


void swap(configuration_proposal_request &a, configuration_proposal_request &b) {
  using ::std::swap;
  swap(a.config, b.config);
  swap(a.type, b.type);
  swap(a.node, b.node);
  swap(a.is_clean_data, b.is_clean_data);
  swap(a.is_upgrade, b.is_upgrade);
}

configuration_proposal_request::configuration_proposal_request(const configuration_proposal_request& other44) {
  config = other44.config;
  type = other44.type;
  node = other44.node;
  is_clean_data = other44.is_clean_data;
  is_upgrade = other44.is_upgrade;
}
configuration_proposal_request& configuration_proposal_request::operator=(const configuration_proposal_request& other45) {
  config = other45.config;
  type = other45.type;
  node = other45.node;
  is_clean_data = other45.is_clean_data;
  is_upgrade = other45.is_upgrade;
  return *this;
}

configuration_query_by_node_request::~configuration_query_by_node_request() throw() {
}


void swap(configuration_query_by_node_request &a, configuration_query_by_node_request &b) {
  using ::std::swap;
  swap(a.node, b.node);
}

configuration_query_by_node_request::configuration_query_by_node_request(const configuration_query_by_node_request& other46) {
  node = other46.node;
}
configuration_query_by_node_request& configuration_query_by_node_request::operator=(const configuration_query_by_node_request& other47) {
  node = other47.node;
  return *this;
}

configuration_query_by_node_response::~configuration_query_by_node_response() throw() {
}


void swap(configuration_query_by_node_response &a, configuration_query_by_node_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.partitions, b.partitions);
}

configuration_query_by_node_response::configuration_query_by_node_response(const configuration_query_by_node_response& other48) {
  err = other48.err;
  partitions = other48.partitions;
}
configuration_query_by_node_response& configuration_query_by_node_response::operator=(const configuration_query_by_node_response& other49) {
  err = other49.err;
  partitions = other49.partitions;
  return *this;
}

configuration_query_by_index_request::~configuration_query_by_index_request() throw() {
}


void swap(configuration_query_by_index_request &a, configuration_query_by_index_request &b) {
  using ::std::swap;
  swap(a.app_name, b.app_name);
  swap(a.partition_indices, b.partition_indices);
}

configuration_query_by_index_request::configuration_query_by_index_request(const configuration_query_by_index_request& other50) {
  app_name = other50.app_name;
  partition_indices = other50.partition_indices;
}
configuration_query_by_index_request& configuration_query_by_index_request::operator=(const configuration_query_by_index_request& other51) {
  app_name = other51.app_name;
  partition_indices = other51.partition_indices;
  return *this;
}

configuration_query_by_index_response::~configuration_query_by_index_response() throw() {
}


void swap(configuration_query_by_index_response &a, configuration_query_by_index_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.partitions, b.partitions);
}

configuration_query_by_index_response::configuration_query_by_index_response(const configuration_query_by_index_response& other52) {
  err = other52.err;
  partitions = other52.partitions;
}
configuration_query_by_index_response& configuration_query_by_index_response::operator=(const configuration_query_by_index_response& other53) {
  err = other53.err;
  partitions = other53.partitions;
  return *this;
}

query_replica_decree_request::~query_replica_decree_request() throw() {
}


void swap(query_replica_decree_request &a, query_replica_decree_request &b) {
  using ::std::swap;
  swap(a.gpid, b.gpid);
  swap(a.node, b.node);
}

query_replica_decree_request::query_replica_decree_request(const query_replica_decree_request& other54) {
  gpid = other54.gpid;
  node = other54.node;
}
query_replica_decree_request& query_replica_decree_request::operator=(const query_replica_decree_request& other55) {
  gpid = other55.gpid;
  node = other55.node;
  return *this;
}

query_replica_decree_response::~query_replica_decree_response() throw() {
}


void swap(query_replica_decree_response &a, query_replica_decree_response &b) {
  using ::std::swap;
  swap(a.err, b.err);
  swap(a.last_decree, b.last_decree);
}

query_replica_decree_response::query_replica_decree_response(const query_replica_decree_response& other56) {
  err = other56.err;
  last_decree = other56.last_decree;
}
query_replica_decree_response& query_replica_decree_response::operator=(const query_replica_decree_response& other57) {
  err = other57.err;
  last_decree = other57.last_decree;
  return *this;
}
}} // namespace
